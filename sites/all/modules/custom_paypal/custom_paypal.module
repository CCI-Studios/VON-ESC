<?php

/**
 * Implements hook_webform_submission_insert().
 */
function custom_paypal_webform_submission_insert($node, $submission) {

    if ($node->nid == 48||
    $node->nid == 253||
    $node->nid == 254||
    $node->nid == 255)
    {
        _custom_paypal_donation($node, $submission);
    }
    else if ($node->field_paypal_payments['und'][0]['value'])
    {
        _custom_paypal_ticket_purchase($node, $submission);
    }
}

/**
 * Function to convert webform submissions into a nicely-mapped array.
 *
 * @see http://www.drupalcoder.com/story/678-additional-processing-in-drupals-webform-3-module
 */
function _custom_paypal_webform_component_mapping($node) {
    $mapping = array();
    $components = $node->webform['components'];
    foreach ($components as $i => $component) {
        $key = $component['form_key'];
        $mapping[$key] = $i;
    }
    return $mapping;
}

function _custom_paypal_ticket_purchase($node, $submission)
{
    $mapping = _custom_paypal_webform_component_mapping($node);

    $quantity = $submission->data[$mapping['quantity']]['value'][0];
    $unit_price = $node->field_price['und'][0]['value'];
    $tax_rate = $node->field_tax['und'][0]['value'];
    $paypal_account = _custom_paypal_get_paypal_account($node);

    $paypal_options = array();
    $paypal_options['cmd'] = '_xclick'; // Varies depending on type of payment sent via PayPal
    $paypal_options['business'] = $paypal_account;  // PayPal account email
    $paypal_options['page_style'] = 'primary'; // Set this in PayPal prefs, then change here (default = paypal)
    $paypal_options['currency_code'] = 'CAD';
    $paypal_options['amount'] = $unit_price;
    $paypal_options['quantity'] = $quantity;
    $paypal_options['item_name'] = $node->title;
    $paypal_options['no_shipping'] = '1'; // Don't prompt user for shipping address
    $paypal_options['no_note'] = '1'; // Don't prompt user for extra information (note)
    $paypal_options['tax_rate'] = $tax_rate;
    $paypal_options['rm'] = '1'; // Return method - 1 = browser redirected to return URL by GET method w/o variables
    $paypal_options['return'] = $GLOBALS['base_url'].'/thank-you'; // Page to which user is returned
    $paypal_options['first_name'] = $submission->data[$mapping['first_name']]['value'][0];
    $paypal_options['last_name'] = $submission->data[$mapping['last_name']]['value'][0];
    $paypal_options['email'] = $submission->data[$mapping['email']]['value'][0];
    $paypal_options['address1'] = $submission->data[$mapping['address']]['value'][0];
    $paypal_options['address2'] = $submission->data[$mapping['address_2']]['value'][0];
    $paypal_options['city'] = $submission->data[$mapping['city']]['value'][0];
    $paypal_options['province'] = $submission->data[$mapping['province']]['value'][0];
    $paypal_options['postal_code'] = $submission->data[$mapping['postal_code']]['value'][0];
    $paypal_options['country'] = 'CA';
    $paypal_options['cbt'] = 'Return to VON Erie St. Clair';
    $paypal_options['custom'] = 'o|'.$node->nid.'|'.$submission->sid;
    $paypal_options['notify_url'] = $GLOBALS['base_url'].'/custom_paypal/ipn';

    _custom_paypal_goto_paypal($paypal_options);
}

function _custom_paypal_donation($node, $submission)
{
    $mapping = _custom_paypal_webform_component_mapping($node);

    $amount = $submission->data[$mapping['amount']]['value'][0];
    $paypal_account = _custom_paypal_get_paypal_account($node);
    $return_url = _custom_paypal_get_return_url($node->nid);
    $location = _custom_paypal_get_location($node);

    $paypal_options = array();
    $paypal_options['cmd'] = '_donations'; // Varies depending on type of payment sent via PayPal
    $paypal_options['business'] = $paypal_account;  // PayPal account email
    $paypal_options['page_style'] = 'primary'; // Set this in PayPal prefs, then change here (default = paypal)
    $paypal_options['currency_code'] = 'CAD';
    $paypal_options['amount'] = $amount;
    $paypal_options['no_shipping'] = '1'; // Don't prompt user for shipping address
    $paypal_options['no_note'] = '1'; // Don't prompt user for extra information (note)
    $paypal_options['rm'] = '1'; // Return method - 1 = browser redirected to return URL by GET method w/o variables
    $paypal_options['return'] = $return_url; // Page to which user is returned
    $paypal_options['first_name'] = $submission->data[$mapping['first_name']]['value'][0];
    $paypal_options['last_name'] = $submission->data[$mapping['last_name']]['value'][0];
    $paypal_options['email'] = $submission->data[$mapping['email']]['value'][0];
    $paypal_options['address1'] = $submission->data[$mapping['address']]['value'][0];
    $paypal_options['address2'] = $submission->data[$mapping['address_2']]['value'][0];
    $paypal_options['city'] = $submission->data[$mapping['city']]['value'][0];
    $paypal_options['province'] = $submission->data[$mapping['province']]['value'][0];
    $paypal_options['postal_code'] = $submission->data[$mapping['postal_code']]['value'][0];
    $paypal_options['country'] = 'CA';
    $paypal_options['cbt'] = 'Return to VON Erie St. Clair';
    $paypal_options['item_name'] = 'Donation to VON '.$location;
    $paypal_options['custom'] = 'd|'.$node->nid.'|'.$submission->sid;
    $paypal_options['notify_url'] = $GLOBALS['base_url'].'/custom_paypal/ipn';

    _custom_paypal_goto_paypal($paypal_options);
}

function _custom_paypal_get_paypal_account($node)
{
    switch(_custom_paypal_get_location($node))
    {
        case 'Chatham-Kent':
            return 'Melissa.landry@von.ca';
        case 'Sarnia-Lambton':
            return 'melissa.crowe@von.ca';
        default:
            return 'Sharon.bevington@von.ca';
    }
}
function _custom_paypal_get_location($node)
{
    switch($node->type)
    {
        case 'purchase_tickets_form':
            $location_tid = $node->field_location['und'][0]['tid'];
            switch ($location_tid)
            {
                case 1:
                    return 'Chatham-Kent';
                case 2:
                    return 'Sarnia-Lambton';
                case 3:
                    return 'Windsor-Essex';
                case 5:
                    return 'Pelee Island';
            }
        
        case 'webform':
            switch ($node->nid)
            {
                case 48:
                    return 'Chatham-Kent';
                case 253:
                    return 'Sarnia-Lambton';
                case 254:
                    return 'Windsor-Essex';
                case 255:
                    return 'Pelee Island';
            }
    }
    
    return 'Windsor-Essex';
}
function _custom_paypal_get_return_url($node)
{
    return $GLOBALS['base_url'].'/'.drupal_html_class(_custom_paypal_get_location($node)).'/thank-you';
}
function _custom_paypal_get_replyto($node)
{
    $location = _custom_paypal_get_location($node);
    switch ($location)
    {
        case 'Sarnia-Lambton':
        case 'Chatham-Kent':
            return 'melissa.crowe@von.ca';
        case 'Windsor-Essex':
        case 'Pelee Island':
        default:
            return 'sharon.bevington@von.caâ€¨';
    }
}
function _custom_paypal_get_admins($node)
{
    $location = _custom_paypal_get_location($node);
    switch ($location)
    {
        case 'Chatham-Kent':
            return 'melissa.crowe@von.ca, kerry.beattie@von.ca';
        case 'Sarnia-Lambton':
            return 'melissa.crowe@von.ca, scott.wilkie@von.ca';
        case 'Windsor-Essex':
        case 'Pelee Island':
        default:
            return 'sharon.bevington@von.ca';
    }
}

function _custom_paypal_goto_paypal($paypal_options)
{
    // Build the URL/query for PayPal payment form.
    $query = http_build_query($paypal_options, '', '&');
    $url = 'https://www.paypal.com/cgi-bin/webscr?' . $query;

    // Redirect user to PayPal...
    drupal_goto($url);
}

function custom_paypal_menu()
{
    $items = array();
    $items['custom_paypal/ipn'] = array(
        'title' => 'Paypal IPN',
        'page callback' => '_custom_paypal_ipn',
        'type' => MENU_CALLBACK,
        'access arguments' => array('access content')
    );
    return $items;
}

function _custom_paypal_ipn()
{
    // STEP 1: read POST data
 
    // Reading POSTed data directly from $_POST causes serialization issues with array data in the POST.
    // Instead, read raw POST data from the input stream. 
    $raw_post_data = file_get_contents('php://input');
    $raw_post_array = explode('&', $raw_post_data);
    $myPost = array();
    foreach ($raw_post_array as $keyval) {
      $keyval = explode ('=', $keyval);
      if (count($keyval) == 2)
         $myPost[$keyval[0]] = urldecode($keyval[1]);
    }
    // read the IPN message sent from PayPal and prepend 'cmd=_notify-validate'
    $req = 'cmd=_notify-validate';
    if(function_exists('get_magic_quotes_gpc')) {
       $get_magic_quotes_exists = true;
    } 
    foreach ($myPost as $key => $value) {        
       if($get_magic_quotes_exists == true && get_magic_quotes_gpc() == 1) { 
            $value = urlencode(stripslashes($value)); 
       } else {
            $value = urlencode($value);
       }
       $req .= "&$key=$value";
    }
     
     
    // STEP 2: POST IPN data back to PayPal to validate
     
    $ch = curl_init('https://www.paypal.com/cgi-bin/webscr');
    curl_setopt($ch, CURLOPT_HTTP_VERSION, CURL_HTTP_VERSION_1_1);
    curl_setopt($ch, CURLOPT_POST, 1);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER,1);
    curl_setopt($ch, CURLOPT_POSTFIELDS, $req);
    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 1);
    curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 2);
    curl_setopt($ch, CURLOPT_FORBID_REUSE, 1);
    curl_setopt($ch, CURLOPT_HTTPHEADER, array('Connection: Close'));
     
    // In wamp-like environments that do not come bundled with root authority certificates,
    // please download 'cacert.pem' from "http://curl.haxx.se/docs/caextract.html" and set 
    // the directory path of the certificate as shown below:
    // curl_setopt($ch, CURLOPT_CAINFO, dirname(__FILE__) . '/cacert.pem');
    if( !($res = curl_exec($ch)) ) {
        // error_log("Got " . curl_error($ch) . " when processing IPN data");
        curl_close($ch);
        exit;
    }
    curl_close($ch);
     
     
    // STEP 3: Inspect IPN validation result and act accordingly
     
    if (strcmp ($res, "VERIFIED") == 0)
    {
        // The IPN is verified, process it:
        // check whether the payment_status is Completed
        // check that txn_id has not been previously processed
        // check that receiver_email is your Primary PayPal email
        // check that payment_amount/payment_currency are correct
        // process the notification
     
        $payment_status = $_POST['payment_status'];
        
        if ($payment_status == 'Completed')
        {
            _custom_paypal_ipn_complete();
        }
        
    }
    else if (strcmp ($res, "INVALID") == 0)
    {
        // IPN invalid, log for manual investigation
        echo "The response from IPN was: <b>" .$res ."</b>";
    }
}

function _custom_paypal_ipn_complete()
{
    $item_name = $_POST['item_name'];
    $payment_status = $_POST['payment_status'];
    $payment_amount = $_POST['mc_gross'];
    $txn_fee = $_POST['mc_fee'];
    $txn_id = $_POST['txn_id'];
    $custom = $_POST['custom'];
    
    $custom_parts = explode('|',$custom);
    $nid = $custom_parts[1];
    $sid = $custom_parts[2];
    $submission = webform_menu_submission_load($sid, $nid);
    $node = node_load($nid);
    $mapping = _custom_paypal_webform_component_mapping($node);
    
    _custom_paypal_insert_submission_txn_id($node, $submission, $txn_id, $mapping['paypal_transaction_id']);
    
    mailsystem_set(array(
        'custom_paypal' => 'MimeMailSystem',
    ));
    
    $submission_email = $submission->data[$mapping['email']]['value'][0];
    $location = _custom_paypal_get_location($node);
    switch($custom_parts[0])
    {
        case 'd':
            $params = array();
            $params['location'] = $location;
            $params['firstname'] = $submission->data[$mapping['first_name']]['value'][0];
            $params['lastname'] = $submission->data[$mapping['last_name']]['value'][0];
            $params['payment_amount'] = $payment_amount;
            $params['replyto'] = _custom_paypal_get_replyto($node);
            
            $key = 'donate';
            if ($location == 'Pelee Island') $key = 'donatepelee';
            drupal_mail('custom_paypal',$key,$submission_email,language_default(),$params,"VON $location <info@voneriestclair.ca>");
            break;
            
        case 'o':
            $params = array();
            $params['subject'] = $node->field_email_subject['und'][0]['value'];
            $params['body'] = $node->field_email_body['und'][0]['value'];
            $params['replyto'] = @$node->field_user_notification_reply_to['und'][0]['value'];
            drupal_mail('custom_paypal','other',$submission_email,language_default(),$params,"VON $location <info@voneriestclair.ca>");
            break;
    }
    
    $params = array();
    $params['account'] = _custom_paypal_get_paypal_account($node);
    $params['item_name'] = $item_name;
    $params['payment_amount'] = $payment_amount;
    $params['txn_fee'] = $txn_fee;
    $params['received_amount'] = number_format((float)$payment_amount - (float)$txn_fee, 2);
    $params['node'] = $node;
    $params['submission'] = $submission;
    $params['txn_id'] = $txn_id;
    $params['admins'] = _custom_paypal_get_admins($node);
    $to = _custom_paypal_get_admins($node);
    if ($node->type == 'purchase_tickets_form' && count($node->field_admin_email_address['und']))
        $to .= ', '.$node->field_admin_email_address['und'][0]['value'];
    drupal_mail('custom_paypal','admin',$to,language_default(),$params,"VON ESC Website <info@voneriestclair.ca>");
}

function _custom_paypal_insert_submission_txn_id($node, $submission, $txn_id, $field_id)
{
    $submission->data[$field_id]['value'][0] = $txn_id;
    webform_submission_update($node, $submission);
}

function custom_paypal_mail($key, &$message, $params)
{
    switch($key)
    {
        case 'donate':
            $location = $params['location'];
            $firstname = $params['firstname'];
            $lastname = $params['lastname'];
            $payment_amount = $params['payment_amount'];
            $replyto = $params['replyto'];
            
            $message['subject'] = t('Thank you for your donation to VON !location', array('!location'=>$location));
            
            $body = "<p><img src='".$GLOBALS['base_url']."/sites/all/themes/vonesc/images/voncanada.png' alt='VON Canada. Health starts at home'/></p>";
            $body .= "<p>Dear !firstname !lastname:</p><p>Thank you for your generous gift of $!payment_amount</p>";
            $body .= "<p>Because of your thoughtfulness, more people have access to the services offered by VON !location. This means that more of your neighbours, friends and family have the opportunity to recover and remain at home - receiving the care and companionship they need to live as independently as possible.</p>";
            $body .= "<p>Your generosity will improve the quality of life for everyone who turns to VON.  Thank you for making all the difference to so many!</p>";
            $body .= "<p>An official tax receipt for your donation will be mailed to you soon.</p>";
            $body .= "<p>Once again, thank you for enabling VON !location to offer care and support to your family, friends and neighbours.</p>";
            $body .= "<p>Sincerely,</p>";
            $body .= "<p><img src='".$GLOBALS['base_url']."/sites/all/themes/vonesc/images/andrewwardsig.png' alt='' /></p>";
            $body .= "<p><strong>Andrew Ward</strong><br>VON Erie St. Clair<br>District Executive Director</p>";
            $message['body'][] = t($body, array('!location'=>$location, '!firstname'=>$firstname, '!lastname'=>$lastname, '!payment_amount'=>$payment_amount));
            
            $message['headers']['Reply-To'] = $replyto;
            $message['headers']['MIME-Version'] = '1.0';
            $message['headers']['Content-Type'] = 'multipart/mixed;';
            $message['headers']['Content-Type'] = 'text/html;';
            break;
            
        
        case 'donatepelee':
            $location = $params['location'];
            $firstname = $params['firstname'];
            $lastname = $params['lastname'];
            $payment_amount = $params['payment_amount'];
            $replyto = $params['replyto'];
            
            $message['subject'] = t('Thank you for your donation to VON !location', array('!location'=>$location));
            
            $body = "<p><img src='".$GLOBALS['base_url']."/sites/all/themes/vonesc/images/voncanada.png' alt='VON Canada. Health starts at home'/></p>";
            $body .= "<p>Dear !firstname !lastname:</p><p>Thank you for your generous gift of $!payment_amount</p>";
            $body .= "<p>Your donation to the VON Pelee Island Nursing Station Improvement Campaign helps to improve the facility and services at the Nursing Station for all residents and visitors to Pelee Island.</p>";
            $body .= "<p>Thank you for making a difference to so many and for enabling VON to offer care and support to your family, friends and neighbours!</p>";
            $body .= "<p>An official tax receipt for your donation will be mailed to you soon.</p>";
            $body .= "<p>VON Windsor-Essex is proud to serve the people of Pelee Island and look forward to doing so for many years.</p>";
            $body .= "<p>Sincerely,</p>";
            $body .= "<p><img src='".$GLOBALS['base_url']."/sites/all/themes/vonesc/images/andrewwardsig.png' alt='' /></p>";
            $body .= "<p><strong>Andrew Ward</strong><br>VON Erie St. Clair<br>District Executive Director</p>";
            $message['body'][] = t($body, array('!location'=>$location, '!firstname'=>$firstname, '!lastname'=>$lastname, '!payment_amount'=>$payment_amount));
            
            $message['headers']['Reply-To'] = $replyto;
            $message['headers']['MIME-Version'] = '1.0';
            $message['headers']['Content-Type'] = 'multipart/mixed;';
            $message['headers']['Content-Type'] = 'text/html;';
            break;
            
        
        case 'other':
            $message['headers']['Reply-To'] = $params['replyto'];
            $message['subject'] = $params['subject'];
            $message['body'][] = $params['body'];
            break;
                
                
        case 'admin':
            $node = $params['node'];
            $submission = $params['submission'];
            $account = $params['account'];
            $item_name = $params['item_name'];
            $payment_amount = $params['payment_amount'];
            $txn_fee = $params['txn_fee'];
            $received_amount = $params['received_amount'];
            $txn_id = $params['txn_id'];
            $form_name = $node->title;
            $admins = $params['admins'];
        
            $message['subject'] = t('!form_name Submitted', array('!form_name'=>$form_name));
            
            $body = "Paypal Account: !account\n";
            $body .= "Admins: !admins\n";
            $body .= "Item Name: !item_name\n";
            $body .= "Payment Amount: $!payment_amount\n";
            $body .= "Transaction Fee: $!txn_fee\n";
            $body .= "Received Amount: $!received_amount\n";
            $body .= "Transaction ID: !txn_id\n";
            $body .= webform_submission_render($node, $submission, NULL, 'email');
            $message['body'][] = t($body, array('!account'=>$account, '!item_name'=>$item_name, '!payment_amount'=>$payment_amount, '!txn_fee'=>$txn_fee, '!received_amount'=>$received_amount, '!txn_id'=>$txn_id, '!admins'=>$admins));
            
            $message['headers']['Reply-To'] = "";
            break;
    }
}
?>
